"use strict";

exports.__esModule = true;
exports.parseUri = parseUri;
exports.stringifyUri = stringifyUri;
exports.applyUriDefaults = applyUriDefaults;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function parseUri(uri, separators) {
  var _takeLeft = takeLeft(uri, separators.scheme),
      scheme = _takeLeft[0],
      rest1 = _takeLeft[1];

  var _takeLeft2 = takeLeft(rest1, separators.namespace),
      namespace = _takeLeft2[0],
      rest2 = _takeLeft2[1];

  var _takeRight = takeRight(rest2, separators.version),
      rest3 = _takeRight[0],
      version = _takeRight[1];

  var _takeRight2 = takeRight(rest3, separators.ext),
      path = _takeRight2[0],
      ext = _takeRight2[1];

  return {
    scheme: scheme,
    namespace: namespace,
    path: path,
    ext: ext,
    version: version
  };
}

function stringifyUri(uriObject, separators) {
  var _ref;

  return (_ref = []).concat.apply(_ref, [[uriObject.scheme, separators.scheme], [uriObject.namespace, separators.namespace], [uriObject.path, ""]].filter(function (_ref2) {
    var part = _ref2[0];
    return part !== "";
  }).concat([[separators.ext, uriObject.ext], [separators.version, uriObject.version]].filter(function (_ref3) {
    var part = _ref3[1];
    return part !== "";
  }))).join("");
}

var PLACEHOLDER = /^\{(\w+)\}$/;

function applyUriDefaults(uriObject, defaults, namespaceByScheme, placeholders) {
  var defaulted = Object.keys(uriObject).reduce(function (result, key) {
    result[key] = uriObject[key] === "" ? defaults[key] : uriObject[key];
    return result;
  }, _extends({}, defaults));
  var namespace = namespaceByScheme[defaulted.scheme];
  var namespaced = namespace != null && uriObject.namespace === "" ? _extends({}, defaulted, {
    namespace: namespace.replace(PLACEHOLDER, function (match, name) {
      return placeholders[name] || match;
    })
  }) : defaulted;
  return namespaced;
}

function takeLeft(string, separator) {
  var index = string.indexOf(separator);
  return index === -1 ? ["", string] : [string.slice(0, index), string.slice(index + separator.length)];
}

function takeRight(string, separator) {
  var index = string.lastIndexOf(separator);
  return index === -1 ? [string, ""] : [string.slice(0, index), string.slice(index + separator.length)];
}